import { IPresentationDefinition } from '@sphereon/pex';
import { VerifyCallback } from '@sphereon/wellknown-dids-client';
import { Resolvable } from 'did-resolver';
import { RP } from './RP';
import { CheckLinkedDomain, ClaimOpts, EcdsaSignature, ExternalSignature, InternalSignature, NoSignature, ObjectBy, PassBy, PresentationVerificationCallback, RequestRegistrationOpts, ResponseContext, ResponseIss, ResponseMode, RevocationVerification, RevocationVerificationCallback, SuppliedSignature, SupportedVersion } from './types';
export default class RPBuilder {
    authorizationEndpoint: string;
    issuer: ResponseIss;
    resolvers: Map<string, Resolvable>;
    customResolver?: Resolvable;
    requestRegistration: Partial<RequestRegistrationOpts>;
    redirectUri: string;
    requestObjectBy: ObjectBy;
    signatureType: InternalSignature | ExternalSignature | SuppliedSignature | NoSignature;
    responseMode?: ResponseMode;
    responseContext?: ResponseContext.RP;
    claims?: ClaimOpts;
    checkLinkedDomain?: CheckLinkedDomain;
    verifyCallback?: VerifyCallback;
    revocationVerification?: RevocationVerification;
    revocationVerificationCallback?: RevocationVerificationCallback;
    presentationVerificationCallback?: PresentationVerificationCallback;
    supportedVersions: SupportedVersion[];
    scope: string;
    responseType: string;
    clientId: string;
    addScope(scope: string): RPBuilder;
    addResponseType(responseType: string): RPBuilder;
    addClientId(clientId: string): RPBuilder;
    addIssuer(issuer: ResponseIss): RPBuilder;
    withPresentationVerification(presentationVerificationCallback: PresentationVerificationCallback): RPBuilder;
    withRevocationVerification(mode: RevocationVerification): RPBuilder;
    withRevocationVerificationCallback(callback: RevocationVerificationCallback): RPBuilder;
    withCustomResolver(resolver: Resolvable): RPBuilder;
    addResolver(didMethod: string, resolver: Resolvable): RPBuilder;
    withAuthorizationEndpoint(authorizationEndpoint: string): RPBuilder;
    withCheckLinkedDomain(mode: CheckLinkedDomain): RPBuilder;
    addDidMethod(didMethod: string, opts?: {
        resolveUrl?: string;
        baseUrl?: string;
    }): RPBuilder;
    redirect(redirectUri: string): RPBuilder;
    requestBy(type: PassBy, referenceUri?: string): RPBuilder;
    response(responseMode: ResponseMode): RPBuilder;
    registrationBy(requestRegistration: RequestRegistrationOpts): RPBuilder;
    signature(signatureType: InternalSignature | SuppliedSignature): RPBuilder;
    internalSignature(hexPrivateKey: string, did: string, kid?: string): RPBuilder;
    suppliedSignature(signature: (data: string | Uint8Array) => Promise<EcdsaSignature | string>, did: string, kid: string): RPBuilder;
    addPresentationDefinitionClaim(definitionOpt: IPresentationDefinition): RPBuilder;
    addVerifyCallback(verifyCallback: VerifyCallback): RPBuilder;
    private initSupportedVersions;
    withSupportedVersions(supportedVersion: SupportedVersion[] | SupportedVersion): RPBuilder;
    build(): RP;
}
